datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator kysely {
    provider = "prisma-kysely"
    output   = "kysely"
}

generator dbml {
    provider    = "prisma-dbml-generator"
    projectName = "Aroundy"
}

generator docs {
    provider = "node node_modules/prisma-docs-generator"
}

// NOTE: Phase 1.5
enum Gender {
    MALE
    FEMALE
}

enum Channel {
    ONLINE
    OFFLINE
    BOTH
    BRANCH
    ONLINE_BRANCH
}

// NOTE: Phase 1.5
// may change a lot later
model User {
    // inherited fields
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    // auth information
    // NOTE: we do *NOT* store password hash since we are using OAuth
    oauthId            String   @unique
    oauthProvider      String // TODO: will be enum
    recentlyLoggedInAt DateTime

    // personal information
    // all fields optional for now
    name   String?
    gender Gender?
    email  String?   @unique
    tel    String?   @unique
    birth  DateTime?
}

model Post {
    // inherited fields
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    title        String                @db.VarChar(16)
    feeds        String[]
    caption      String                @db.VarChar(2200)
    channel      Channel
    location     Unsupported("point")?
    locationText String?
    region       String?
    branch       String?
    contact      String?
    publishedAt  DateTime
    startedAt    DateTime?
    endedAt      DateTime?
    link         String?
    likes        Int // TODO: will have a relation with User later
    views        Int

    // owned relations
    tags Tag[]

    // referenced relations
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: NoAction)
    companyId  String
    company    Company  @relation(fields: [companyId], references: [id], onDelete: NoAction)
}

model Company {
    // inherited fields
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    name String @unique
    logo String

    // owned relations
    post Post[]
}

model Category {
    // inherited fields
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String @unique

    // owned relations
    post Post[]
}

model Tag {
    // inherited fields
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String @unique

    // owned relations
    post Post[]
}
